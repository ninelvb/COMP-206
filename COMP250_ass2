/*
 * Name: Nine Loevenbruck
 * ID: 260671505

 */

import java.util.Stack;
import java.util.ArrayList;

public class Expression  {
	private ArrayList<String> tokenList;

	//  Constructor    
	/**
	 * The constructor takes in an expression as a string
	 * and tokenizes it (breaks it up into meaningful units)
	 * These tokens are then stored in an array list 'tokenList'.
	 */

	Expression(String expressionString) throws IllegalArgumentException{
		tokenList = new ArrayList<String>();
		StringBuilder token = new StringBuilder();

		//ADD YOUR CODE BELOW HERE
		for(int i=0; i< expressionString.length(); i++) {
			char first = expressionString.charAt(i);
			String digit = String.valueOf(first);
			if(digit.equals("*") || digit.equals("/") || digit.equals("(") || digit.equals(")") || digit.equals("[") || digit.equals("]")) {
				tokenList.add(digit);
			}else if (digit.equals("+") || digit.equals("-")) {
				if((String.valueOf(expressionString.charAt(i+1))).equals(digit)){
					token.append(digit);
					token.append(digit);
					tokenList.add(token.toString());
					token.delete(0,2); //empty the token
					i++;
				}else{
					tokenList.add(digit);
				}

			}else if (!digit.equals(" ")){ //then it's an integer
				token.append(digit);
				int k = 1;
				for (int j = i+1; j < expressionString.length(); j++){
					if(!isInteger(String.valueOf(expressionString.charAt(j)))){
						j = expressionString.length(); //to end the loop
						tokenList.add(token.toString());
						token.delete(0,k);
						i = i + k - 1;
					} else if(isInteger(String.valueOf(expressionString.charAt(j)))){
						token.append(String.valueOf(expressionString.charAt(j)));
						k++;
					}
				}
			}
		}  
		//ADD YOUR CODE ABOVE HERE
	}

	/**
	 * This method evaluates the expression and returns the value of the expression
	 * Evaluation is done using 2 stack ADTs, operatorStack to store operators
	 * and valueStack to store values and intermediate results.
	 * - You must fill in code to evaluate an expression using 2 stacks
	 */
	public Integer eval(){
		Stack<String> operatorStack = new Stack<String>();
		Stack<Integer> valueStack = new Stack<Integer>();

		//ADD YOUR CODE BELOW HERE

		for(int i=0; i < tokenList.size(); i++) {
			if((!isInteger(tokenList.get(i))) && (!tokenList.get(i).equals("("))) {
				if (!tokenList.get(i).equals("(") && !tokenList.get(i).equals("[")) {//if not a left bracket
					operatorStack.push(tokenList.get(i));
					if (tokenList.get(i).equals(")") || tokenList.get(i).equals("]")) {
						operatorStack.pop();
					}else {
						String prevOp = operatorStack.peek();
						if (prevOp.equals("+")) {
							int secondNum = valueStack.pop();
							if (isInteger((tokenList.get(i+1)))) {
								int firstNum = (Integer.valueOf(tokenList.get(i+1)));
								int sum = firstNum + secondNum;
								valueStack.push(sum);
							} else {
								operatorStack.pop();
								if (tokenList.get(i).equals(")") || tokenList.get(i).equals("]")) {
									while((!tokenList.get(i).equals("(") || !tokenList.get(i).equals("["))) {
										//method();
										i++;
									}
								}
								int firstNum = valueStack.pop();
								int sum = firstNum + secondNum;
								valueStack.push(sum);
							}
							i++;
						}
						else if (prevOp.equals("-")) {
							int secondNum = valueStack.pop();
							if (isInteger((tokenList.get(i+1)))) {
								int firstNum = (Integer.valueOf(tokenList.get(i+1)));
								int diff = firstNum - secondNum;
								valueStack.push(diff);
							} else {
								operatorStack.pop();
								if (tokenList.get(i).equals(")") || tokenList.get(i).equals("]")) {
									while((!tokenList.get(i).equals("(") || !tokenList.get(i).equals("["))) {
										//method();
										i++;
									}
								}
								int firstNum = valueStack.pop();
								int diff = firstNum - secondNum;
								valueStack.push(diff);
							}
							i++;
						}
						else if (prevOp.equals("*")) {
							int secondNum = valueStack.pop();
							if (isInteger((tokenList.get(i+1)))) {
								int firstNum = (Integer.valueOf(tokenList.get(i+1)));
								int multiplication = firstNum * secondNum;
								valueStack.push(multiplication);
							}else {
								operatorStack.pop();
								if (tokenList.get(i).equals(")") || tokenList.get(i).equals("]")) {
									while((!tokenList.get(i).equals("(") || !tokenList.get(i).equals("["))) {
										//method();
										i++;
									}
								}
								int firstNum = valueStack.pop();
								int multiplication = firstNum * secondNum;
								valueStack.push(multiplication);
							}
						}
						else if (prevOp.equals("/")) {
							int secondNum = valueStack.pop();
							if (isInteger((tokenList.get(i+1)))) {
								int firstNum = (Integer.valueOf(tokenList.get(i+1)));
								int division = firstNum / secondNum;
								valueStack.push(division);
							}else {
								operatorStack.pop();
								if (tokenList.get(i).equals(")") || tokenList.get(i).equals("]")) {
									while((!tokenList.get(i).equals("(") || !tokenList.get(i).equals("["))) {
										//method();
										i++;
									}
								}
								int firstNum = valueStack.pop();
								int division = firstNum / secondNum;
								valueStack.push(division);
							}
						}
						else if (prevOp.equals("++")) {
							int num = valueStack.pop();
							int plusOne = num + 1;
							valueStack.push(plusOne);
						}
						else if (prevOp.equals("--")) {
							int num = valueStack.pop();
							int minusOne = num - 1;
							valueStack.push(minusOne);
						}
						operatorStack.pop();
					}

				}  

			}else if (isInteger(tokenList.get(i))) {
				valueStack.push(Integer.valueOf(tokenList.get(i)));
			}
			else if (tokenList.get(i).equals("[")) {
				int num = valueStack.pop();
				int abs = Math.abs(num);
				valueStack.push(abs);
			} 
		}
		int result = valueStack.peek();
		return result;

		//ADD YOUR CODE ABOVE HERE

	}

	//Helper methods
	/**
	 * Helper method to test if a string is an integer
	 * Returns true for strings of integers like "456"
	 * and false for string of non-integers like "+"
	 * - DO NOT EDIT THIS METHOD
	 */
	private boolean isInteger(String element){
		try{
			Integer.valueOf(element);
		}catch(NumberFormatException e){
			return false;
		}
		return true;
	}

	/**
	 * Method to help print out the expression stored as a list in tokenList.
	 * - DO NOT EDIT THIS METHOD    
	 */

	@Override
	public String toString(){ 
		String s = new String(); 
		for (String t : tokenList )
			s = s + "~"+  t;
		return s;  
	}

}

